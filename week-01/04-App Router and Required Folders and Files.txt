Project Structure in a New Next.js App

When you open your project folder, you‚Äôll see a bunch of files and folders. Some are required for the app to run, and others are optional helpers.

At the absolute minimum, a Next.js application requires:

The app folder inside src/

The next.config.ts file (configuration)

The package.json file (dependencies and scripts)

üëâ The src folder we enabled during setup is just for organization. It doesn‚Äôt affect how Next.js works, but it helps keep your project tidy. For example, as we add components/, lib/, hooks/, styles/, etc., the project could become cluttered at the root level. Putting everything inside src/ keeps things neat. You can even configure this later, after project creation.

The app folder is the core of your project. It contains:

layout.tsx ‚Üí Defines the overall layout/wrapper of your app (like headers, navbars, footers).

page.tsx ‚Üí Defines the actual content of the page (what the user sees at a URL).

At the root, you also need:

next.config.ts ‚Üí Project configuration.

package.json ‚Üí Dependencies and scripts.

Everything else is a helper utility.

Key Files in a Next.js Project
1. package.json

The central configuration file for any Node.js/npm project.

Primary Functions:

Project Metadata ‚Äì Basic information about your project:

{
  "name": "my-nextjs-app",
  "version": "1.0.0",
  "description": "My awesome Next.js application",
  "author": "Your Name",
  "license": "MIT"
}


Dependency Management ‚Äì Lists required packages:

dependencies ‚Üí Needed for the app to run.

devDependencies ‚Üí Only needed in development (e.g., testing, building, linting).

Script Commands ‚Äì Shortcuts for tasks (run with npm run <script>):

dev ‚Üí Starts the development server (npm run dev).

build ‚Üí Builds the app for production.

start ‚Üí Runs the app in production (only after running build).

lint ‚Üí Runs ESLint to analyze your code for errors, bugs, or stylistic issues.

üëâ In the previous lecture, we saw how npm run dev was just a shortcut for a longer command (next dev --turbopack). Scripts keep commands simple and memorable.

We‚Äôll add more to package.json as we go (for example, adding Jest for testing).

2. package-lock.json

Auto-generated and managed by npm.

Do not edit this file manually.

Ensures consistent dependency versions across environments.

Prevents the common ‚Äúworks on my machine‚Äù problem (where an app runs fine on one computer but fails on another).

3. eslint.config.mjs

Configuration for ESLint, which enforces coding standards and checks for errors. This is especially tuned for TypeScript projects.

4. postcss.config.mjs

Created to support Tailwind CSS. It configures PostCSS to process Tailwind styles.

5. tsconfig.json

Configuration file for TypeScript. It tells TypeScript how to compile .ts and .tsx files (React components written in TypeScript).

6. next.config.ts

The main configuration file for Next.js. It customizes how Next.js builds and runs your app.

You can configure things like:

Where and how to deploy (static export vs server).

Which external domains are allowed for images.

Redirects and rewrites for URLs.

Environment variables.

Webpack customizations.

Experimental features.

üëâ Without this file, Next.js uses sensible defaults. With it, you can fine-tune the behavior of your project.

7. node_modules/

This folder contains all installed dependencies. It‚Äôs created automatically during installation.

8. public/

A special folder where you put static files you want to serve directly.

Examples:

Images (logo.png ‚Üí yoursite.com/logo.png)

Icons and favicons

PDFs or downloads

SEO-related files like robots.txt or sitemap.xml

Files here are served as-is, without Next.js optimization.